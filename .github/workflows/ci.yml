name: Django CI

on: [push]

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install flake8
        run: |
          python -m pip install --upgrade pip
          pip install flake8

      - name: Run flake8
        run: flake8 .

  test:
    needs: lint
    runs-on: ubuntu-latest
    env:
      SECRET_KEY: ${{ secrets.SECRET_KEY }}
      STRIPE_API_KEY: ${{ secrets.STRIPE_API_KEY}}

    services:
      postgres:
        image: postgres:15.10
        ports:
          - 5432:5432

    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Set up PostgreSQL
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client
          sudo service postgresql start
          sudo -u postgres psql -c "ALTER USER postgres PASSWORD 'test_password';"
          sudo -u postgres psql -c "CREATE DATABASE test_database;"
          sudo -u postgres psql -c "CREATE ROLE runner WITH LOGIN PASSWORD 'test_password';"
          sudo -u postgres psql -c "GRANT ALL PRIVILEGES ON DATABASE test_database TO runner;"
          sudo -u postgres psql -c "GRANT CREATE ON SCHEMA public TO runner;"

      - name: Create static directory
        run: mkdir -p static

      - name: Run migrate
        run: python manage.py migrate

      - name: Run tests
        run: python manage.py test

  build:
    needs: test
    runs-on: ubuntu-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Log in in Docker hub
        run: echo ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }} | docker login -u ${{ secrets.DOCKER_HUB_USERNAME }} --password-stdin

      - name: Build Docker image
        run: docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/drf_hw_app:${{ github.sha }} .

      - name: Push Docker image in Docker hub
        run: docker push ${{ secrets.DOCKER_HUB_USERNAME }}/drf_hw_app:${{ github.sha }}

  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_KEY }}

      - name: Deploy to server
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} << 'EOF'
          sudo docker pull ${{ secrets.DOCKER_HUB_USERNAME }}/drf_hw_app:${{ github.sha }}
          sudo docker stop $(sudo docker ps -q) || true
          sudo docker rm $(sudo docker ps -a -q) || true
          sudo docker rmi $(sudo docker images -q) || true
          sudo docker run -d --name drf_hw_app_1 -p 8000:8000 ${{ secrets.DOCKER_HUB_USERNAME }}/drf_hw_app:${{ github.sha }}
          EOF
