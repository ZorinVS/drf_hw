# version: '3.9'

services:
  app:
    build: .
    env_file:
      - .env
    environment:
      CELERY_BROKER_URL: redis://redis:6379/0
    command: >
      bash -c "python manage.py collectstatic --noinput && python manage.py migrate && python manage.py runserver 0.0.0.0:8000"
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - .:/app
      - static_volume:/app/staticfiles
    ports:
      - "8000:8000"
    networks:
      - my_network
  nginx:
    build:
      context: ./nginx
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - static_volume:/app/staticfiles
    depends_on:
      - app
    networks:
      - my_network
  db:
    image: postgres:15.10
    env_file:
      - .env
    environment:
      POSTGRES_DB: drf_hw
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U $POSTGRES_USER -d $POSTGRES_DB" ]
      interval: 30s
      timeout: 10s
      retries: 5
    volumes:
      - postgres_data:/var/lib/postgresql/data
    expose:
      - "5432"
    networks:
      - my_network
  redis:
    image: redis:7.4.2
    env_file:
      - .env
    command: redis-server
    expose:
      - "6379"
    networks:
      - my_network
  celery:
    build: .
    env_file:
      - .env
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
    command: celery -A config worker -l INFO
    depends_on:
      - redis
      - db
    healthcheck:
      test: [ "CMD-SHELL", "celery -A config status" ]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - my_network
  celery_beat:
    build: .
    env_file:
      - .env
    command: >
      bash -c "celery -A config beat -l info -S django"
    depends_on:
      celery:
        condition: service_healthy
    networks:
      - my_network
volumes:
  postgres_data:
  static_volume:

networks:
  my_network:
    driver: bridge
